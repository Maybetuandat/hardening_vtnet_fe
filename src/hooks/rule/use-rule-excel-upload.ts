import { useState, useCallback } from "react";
import { api } from "@/lib/api";
import { toast } from "sonner";
import { RuleCreate } from "@/types/rule";

import { ExcelUploadResult } from "@/types/workload";
import { useExcelParser } from "@/hooks/workload/use-excel-parser";

import { useRules } from "@/hooks/rule/use-rules";

export interface RuleCheckResult {
  name: string;
  description?: string;
  workload_id: number;
  parameters?: Record<string, any>;
  is_active: boolean;
  is_duplicate: boolean;
  duplicate_reason?: "name" | "parameter_hash";
}

interface UseRuleExcelUploadReturn {
  loading: boolean;
  checkingExistence: boolean;
  error: string | null;
  rules: RuleCreate[];

  checkResults: RuleCheckResult[] | null;
  canAddRules: boolean;
  parseExcelFile: (file: File) => Promise<ExcelUploadResult>;
  checkRulesExistence: (workloadId: number) => Promise<void>;
  createUniqueRules: (workloadId: number) => Promise<void>;
  resetState: () => void;
}

export function useRuleExcelUpload(): UseRuleExcelUploadReturn {
  const [loading, setLoading] = useState(false);
  const [checkingExistence, setCheckingExistence] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Data state
  const [rules, setRules] = useState<RuleCreate[]>([]);

  const [checkResults, setCheckResults] = useState<RuleCheckResult[] | null>(
    null
  );

  // Hooks - t√°i s·ª≠ d·ª•ng existing hooks
  const { parseExcelFile: parseExcel } = useExcelParser();
  const { createRule } = useRules();

  /**
   * Parse Excel file - t√°i s·ª≠ d·ª•ng logic t·ª´ useExcelParser
   */
  const parseExcelFile = useCallback(
    async (file: File): Promise<ExcelUploadResult> => {
      setLoading(true);
      setError(null);
      setCheckResults(null);

      try {
        if (!parseExcel) {
          throw new Error("Excel parser kh√¥ng kh·∫£ d·ª•ng");
        }

        const result = await parseExcel(file);

        if (result.success && result.rules) {
          // Convert sang RuleCreate format
          const rulesForApi = result.rules.map((rule) => ({
            name: rule.name,
            description: rule.description || "",
            workload_id: 0, // S·∫Ω ƒë∆∞·ª£c set sau
            parameters: rule.parameters || {},
            is_active: rule.is_active !== false,
          }));

          setRules(rulesForApi);
        }

        return result;
      } catch (err: any) {
        const errorMessage = err.message || "Kh√¥ng th·ªÉ parse file Excel";
        setError(errorMessage);
        return {
          success: false,
          rules: [],
          errors: [errorMessage],
        };
      } finally {
        setLoading(false);
      }
    },
    [parseExcel]
  );

  const checkRulesExistence = useCallback(
    async (workloadId: number): Promise<void> => {
      if (rules.length === 0) {
        toast.error("Kh√¥ng c√≥ rules ƒë·ªÉ ki·ªÉm tra");
        return;
      }

      setCheckingExistence(true);
      setError(null);

      try {
        console.log("üîç Checking rules existence:", {
          workloadId,
          rulesCount: rules.length,
        });

        // Update workload_id cho rules
        const rulesToCheck = rules.map((rule) => ({
          ...rule,
          workload_id: workloadId,
        }));

        // FIX: G·ªçi API v·ªõi workload_id l√† query parameter
        const response = await api.post<RuleCheckResult[]>(
          `/rules/check-existence?workload_id=${workloadId}`,
          rulesToCheck // rules array s·∫Ω l√† request body
        );

        console.log("‚úÖ Rules existence check completed:", response);
        setCheckResults(response);

        const duplicateCount = response.filter((r) => r.is_duplicate).length;
        const uniqueCount = response.filter((r) => !r.is_duplicate).length;

        if (duplicateCount > 0) {
          toast.warning(
            `Ph√°t hi·ªán ${duplicateCount} rules tr√πng l·∫∑p. Ch·ªâ c√≥ th·ªÉ t·∫°o ${uniqueCount} rules m·ªõi.`
          );
        } else {
          toast.success(`T·∫•t c·∫£ ${uniqueCount} rules ƒë·ªÅu c√≥ th·ªÉ ƒë∆∞·ª£c t·∫°o.`);
        }
      } catch (err: any) {
        console.error("‚ùå Error checking rules existence:", err);
        const errorMessage = err.message || "Kh√¥ng th·ªÉ ki·ªÉm tra rule existence";
        setError(errorMessage);
        toast.error(errorMessage);
      } finally {
        setCheckingExistence(false);
      }
    },
    [rules]
  );

  /**
   * T·∫°o c√°c rules unique (ƒë√£ ƒë∆∞·ª£c check)
   */
  const createUniqueRules = useCallback(
    async (workloadId: number): Promise<void> => {
      if (!checkResults) {
        toast.error("Vui l√≤ng ki·ªÉm tra rule existence tr∆∞·ªõc");
        return;
      }

      setLoading(true);
      setError(null);

      try {
        // Ch·ªâ t·∫°o rules kh√¥ng duplicate
        const uniqueResults = checkResults.filter(
          (result) => !result.is_duplicate
        );

        if (uniqueResults.length === 0) {
          toast.error("Kh√¥ng c√≥ rules m·ªõi ƒë·ªÉ t·∫°o");
          return;
        }

        console.log("üöÄ Creating unique rules:", {
          workloadId,
          uniqueCount: uniqueResults.length,
        });

        // T·∫°o rules
        const createdRules = [];
        for (const result of uniqueResults) {
          const ruleData = {
            name: result.name,
            description: result.description || "",
            workload_id: workloadId,
            parameters: result.parameters || {},
            is_active: result.is_active,
          };
          const createdRule = await createRule(ruleData);
          createdRules.push(createdRule);
        }

        console.log("‚úÖ Rules created successfully:", createdRules.length);
      } catch (err: any) {
        console.error("‚ùå Error creating rules:", err);
        const errorMessage = err.message || "Kh√¥ng th·ªÉ t·∫°o rules";
        setError(errorMessage);
        throw new Error(errorMessage);
      } finally {
        setLoading(false);
      }
    },
    [checkResults, createRule]
  );

  const resetState = useCallback(() => {
    setLoading(false);
    setCheckingExistence(false);
    setError(null);
    setRules([]);

    setCheckResults(null);
  }, []);

  // Logic ƒë·ªÉ enable/disable n√∫t Add
  const canAddRules =
    checkResults !== null &&
    checkResults.some((r) => !r.is_duplicate) &&
    !loading &&
    !checkingExistence;

  return {
    loading,
    checkingExistence,
    error,
    rules,

    checkResults,
    canAddRules,
    parseExcelFile,
    checkRulesExistence,
    createUniqueRules,
    resetState,
  };
}
